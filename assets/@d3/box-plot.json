{
    "id": "7536f1d9930dde80",
    "slug": "box-plot",
    "trashed": false,
    "likes": 30,
    "publish_level": "public",
    "forks": 19,
    "fork_of": null,
    "update_time": "2020-08-27T08:45:19.291Z",
    "publish_time": "2018-10-09T21:18:05.601Z",
    "publish_version": 202,
    "thumbnail": "4081911687b22774e9ef73f647b14c5892fcf1cdb2dfad39d52482fa1eb2233b",
    "roles": [],
    "sharing": null,
    "owner": {
        "id": "863951e3ebe4c0ae",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/c29cf4d85eece3bf402bbaffe1e260c6e5881a490c99c6a1e52a8a2f3f6fb10e",
        "login": "d3",
        "name": "D3",
        "bio": "Bring your data to life.",
        "home_url": "https://d3js.org",
        "type": "team"
    },
    "creator": {
        "id": "074c414ad1d825f5",
        "github_login": "mbostock",
        "avatar_url": "https://avatars2.githubusercontent.com/u/230541?v=4",
        "login": "mbostock",
        "name": "Mike Bostock",
        "bio": "Building a better computational medium. Founder @observablehq. Creator @d3. Former @nytgraphics. Pronounced BOSS-tock.",
        "home_url": "https://bost.ocks.org/mike/"
    },
    "collections": [
        {
            "id": "d9df4fb5263ace62",
            "type": "public",
            "slug": "visualization",
            "title": "Visualization",
            "description": "Explore and explain patterns in quantitative data using D3 and Vega.",
            "update_time": "2018-11-13T23:08:52.374Z",
            "pinned": true,
            "ordered": false,
            "custom_thumbnail": "09e385d95ce7df7d392b0133d68e97dd5675378190775d038d21516ea62178ba",
            "thumbnail": "09e385d95ce7df7d392b0133d68e97dd5675378190775d038d21516ea62178ba",
            "listing_count": 74,
            "document_count": 74,
            "collection_count": 0,
            "parent_collection_count": 1,
            "owner": {
                "id": "f35c755083683fe5",
                "avatar_url": "https://avatars2.githubusercontent.com/u/30080011?v=4",
                "login": "observablehq",
                "name": "Observable",
                "bio": "Use data to think, together.",
                "home_url": "https://observablehq.com",
                "type": "team"
            }
        }
    ],
    "files": [
        {
            "id": "b7255a952ef1deae136ddf9edb9495165ac68f275cd37d03094e920b56bd4bd9567831275771ed449cd0cf9ffe9089eff934dcd5e5c5221ab1a294a8fc97ac3e",
            "url": "https://static.observableusercontent.com/files/b7255a952ef1deae136ddf9edb9495165ac68f275cd37d03094e920b56bd4bd9567831275771ed449cd0cf9ffe9089eff934dcd5e5c5221ab1a294a8fc97ac3e",
            "download_url": "https://static.observableusercontent.com/files/b7255a952ef1deae136ddf9edb9495165ac68f275cd37d03094e920b56bd4bd9567831275771ed449cd0cf9ffe9089eff934dcd5e5c5221ab1a294a8fc97ac3e?response-content-disposition=attachment%3Bfilename*%3DUTF-8%27%27diamonds.csv",
            "name": "diamonds.csv",
            "create_time": "2019-10-31T17:27:15.957Z",
            "status": "public",
            "size": 513118,
            "mime_type": null,
            "content_encoding": "gzip"
        }
    ],
    "comments": [],
    "commenting_lock": null,
    "version": 202,
    "title": "Box Plot",
    "license": "isc",
    "copyright": "Copyright 2018â€“2020 Observable, Inc.",
    "nodes": [
        {
            "id": 0,
            "value": "md`# Box Plot\n\nA box-and-whisker plot shows summary statistics of a quantitative distribution. Here, the price distribution (*y*-axis) of a set of diamonds is plotted for a given range of carat values (*x*-axis).`",
            "pinned": false
        },
        {
            "id": 16,
            "value": "chart = {\n  const svg = d3.select(DOM.svg(width, height));\n\n  const g = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(bins)\n    .join(\"g\");\n\n  g.append(\"path\")\n      .attr(\"stroke\", \"currentColor\")\n      .attr(\"d\", d => `\n        M${x((d.x0 + d.x1) / 2)},${y(d.range[1])}\n        V${y(d.range[0])}\n      `);\n\n  g.append(\"path\")\n      .attr(\"fill\", \"#ddd\")\n      .attr(\"d\", d => `\n        M${x(d.x0) + 1},${y(d.quartiles[2])}\n        H${x(d.x1)}\n        V${y(d.quartiles[0])}\n        H${x(d.x0) + 1}\n        Z\n      `);\n\n  g.append(\"path\")\n      .attr(\"stroke\", \"currentColor\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"d\", d => `\n        M${x(d.x0) + 1},${y(d.quartiles[1])}\n        H${x(d.x1)}\n      `);\n\n  g.append(\"g\")\n      .attr(\"fill\", \"currentColor\")\n      .attr(\"fill-opacity\", 0.2)\n      .attr(\"stroke\", \"none\")\n      .attr(\"transform\", d => `translate(${x((d.x0 + d.x1) / 2)},0)`)\n    .selectAll(\"circle\")\n    .data(d => d.outliers)\n    .join(\"circle\")\n      .attr(\"r\", 2)\n      .attr(\"cx\", () => (Math.random() - 0.5) * 4)\n      .attr(\"cy\", d => y(d.y));\n\n  svg.append(\"g\")\n      .call(xAxis);\n\n  svg.append(\"g\")\n      .call(yAxis);\n\n  return svg.node();\n}",
            "pinned": true
        },
        {
            "id": 184,
            "value": "bins = d3.histogram()\n    .thresholds(n)\n    .value(d => d.x)\n  (data)\n    .map(bin => {\n      bin.sort((a, b) => a.y - b.y);\n      const values = bin.map(d => d.y);\n      const min = values[0];\n      const max = values[values.length - 1];\n      const q1 = d3.quantile(values, 0.25);\n      const q2 = d3.quantile(values, 0.50);\n      const q3 = d3.quantile(values, 0.75);\n      const iqr = q3 - q1; // interquartile range\n      const r0 = Math.max(min, q1 - iqr * 1.5);\n      const r1 = Math.min(max, q3 + iqr * 1.5);\n      bin.quartiles = [q1, q2, q3];\n      bin.range = [r0, r1];\n      bin.outliers = bin.filter(v => v.y < r0 || v.y > r1); // TODO\n      return bin;\n    })",
            "pinned": true
        },
        {
            "id": 3,
            "value": "data = d3.csvParse(await FileAttachment(\"diamonds.csv\").text(), ({carat, price}) => ({x: +carat, y: +price}))",
            "pinned": true
        },
        {
            "id": 26,
            "value": "x = d3.scaleLinear()\n    .domain([d3.min(bins, d => d.x0), d3.max(bins, d => d.x1)])\n    .rangeRound([margin.left, width - margin.right])",
            "pinned": true
        },
        {
            "id": 29,
            "value": "y = d3.scaleLinear()\n    .domain([d3.min(bins, d => d.range[0]), d3.max(bins, d => d.range[1])]).nice()\n    .range([height - margin.bottom, margin.top])",
            "pinned": true
        },
        {
            "id": 36,
            "value": "xAxis = g => g\n    .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n    .call(d3.axisBottom(x).ticks(n).tickSizeOuter(0))",
            "pinned": true
        },
        {
            "id": 44,
            "value": "yAxis = g => g\n    .attr(\"transform\", `translate(${margin.left},0)`)\n    .call(d3.axisLeft(y).ticks(null, \"s\"))\n    .call(g => g.select(\".domain\").remove())",
            "pinned": true
        },
        {
            "id": 149,
            "value": "n = width / 40",
            "pinned": true
        },
        {
            "id": 19,
            "value": "height = 600",
            "pinned": true
        },
        {
            "id": 23,
            "value": "margin = ({top: 20, right: 20, bottom: 30, left: 40})",
            "pinned": true
        },
        {
            "id": 8,
            "value": "d3 = require(\"d3@6\")",
            "pinned": true
        }
    ]
}